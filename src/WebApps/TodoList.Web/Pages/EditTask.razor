@page "/tasks/edit/{Id:guid}"
@using TodoList.Web.Models
@using TodoList.Web.Services
@inject ITaskService TaskService
@inject NavigationManager NavigationManager

<h3>Edycja Zadania</h3>

@if (taskModel == null)
{
    <p>Ładowanie zadania...</p>
}
else
{
    <EditForm Model="taskModel" OnValidSubmit="HandleValidSubmit">

        <div class="form-group">
            <label for="title">Tytuł</label>
            <InputText id="title" @bind-Value="taskModel.Title" class="form-control" />
            <ValidationMessage For="@(() => taskModel.Title)" />
        </div>

        <div class="form-group">
            <label for="dueDate">Termin</label>
            <InputDate id="dueDate" @bind-Value="taskModel.DueDate" class="form-control" />
            <ValidationMessage For="@(() => taskModel.DueDate)" />
        </div>

        <div class="form-group form-check mt-3">
            <InputCheckbox id="isCompleted" @bind-Value="taskModel.IsCompleted" class="form-check-input" />
            <label class="form-check-label" for="isCompleted">Ukończone</label>
        </div>

        <div class="mt-3">
            <button type="submit" class="btn btn-primary">Zapisz Zmiany</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Anuluj</button>
        </div>
    </EditForm>


    @if (isLoading)
    {
        <p>Zapisuję zmiany...</p>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    @if (successMessage)
    {
        <div class="alert alert-success mt-3" role="alert">
            Zadanie zostało zaktualizowane pomyślnie!
        </div>
    }

}


@code {
    [Parameter]
    public Guid Id { get; set; }

    private UpdateTaskCommand taskModel;
    private bool isLoading = false;
    private bool successMessage = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadTask();
    }

    private async Task LoadTask()
    {
        try
        {
            var taskItem = await TaskService.GetTaskById(Id);
            taskModel = new UpdateTaskCommand
                {
                    DueDate = taskItem.DueDate,
                    Id = taskItem.Id,
                    IsCompleted = taskItem.IsCompleted,
                    Title = taskItem.Title
                };

            if (taskModel == null)
            {
                // Jeśli zadanie nie istnieje, przekieruj użytkownika
                NavigationManager.NavigateTo("/tasks");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Wystąpił błąd podczas ładowania zadania: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        isLoading = true;
        errorMessage = string.Empty;
        successMessage = false;

        try
        {
            await TaskService.UpdateTask(taskModel);
            successMessage = true;

            // Opcjonalnie: Przekieruj użytkownika po sukcesie
            // NavigationManager.NavigateTo("/tasks");
        }
        catch (Exception ex)
        {
            errorMessage = $"Wystąpił błąd podczas aktualizacji zadania: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/tasks4");
    }
}
