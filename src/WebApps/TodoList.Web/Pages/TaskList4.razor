@page "/tasks4"
@using TodoList.Web.Models
@using TodoList.Web.Services


@inject ITaskService TaskService
@inject NavigationManager NavigationManager

<h1>Wszystkie Zadania (Strona @currentPage z @totalPages)</h1>

@if (tasks == null)
{
    <p>Ładowanie...</p>
}
else if (tasks.Count == 0)
{
    <p>Brak zadań do wyświetlenia.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Tytuł</th>
                <th>Termin</th>
                <th>Status</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks)
            {
                <tr>
                    <td>@task.Title</td>
                    <td>@task.DueDate.ToShortDateString()</td>
                    <td>@(task.IsCompleted ? "Ukończone" : "Nieukończone")</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditTask(task.Id)">Edytuj</button>
                        <button class="btn btn-danger" @onclick="() => DeleteTask(task.Id)">Usuń</button>
                        <button class="btn btn-info" @onclick="() => ViewDetails(task.Id)">Szczegóły</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination">
        <button class="btn btn-secondary me-2" @onclick="PreviousPage" disabled="@(currentPage == 1)">Poprzednia</button>
        <span>Strona @currentPage z @totalPages</span>
        <button class="btn btn-secondary ms-2 me-3" @onclick="NextPage" disabled="@(currentPage == totalPages)">Następna</button>
        <button class="btn btn-success" @onclick="CreateTask">Dodaj zadanie</button>
    </div>

    
}

@code {
    private List<TaskItem> tasks;
    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        var result = await TaskService.GetTaskItemsPagination(currentPage, pageSize);
        tasks = result.Items;
        totalPages = result.TotalPages;
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadTasks();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadTasks();
        }
    }

    private void EditTask(Guid id)
    {
        NavigationManager.NavigateTo($"/tasks/edit/{id}");
    }

    private void CreateTask()
    {
        NavigationManager.NavigateTo("/tasks/create");
    }

    private async Task DeleteTask(Guid id)
    {
        await TaskService.DeleteTask(id);
        await LoadTasks();
    }

    private void ViewDetails(Guid id)
    {
        NavigationManager.NavigateTo($"/tasks/details/{id}");
    }
}