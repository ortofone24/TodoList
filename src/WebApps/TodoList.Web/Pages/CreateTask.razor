@page "/tasks/create"
@using TodoList.Web.Models
@using TodoList.Web.Services
@inject ITaskService TaskService
@inject NavigationManager NavigationManager

<h3>Dodaj Nowe Zadanie</h3>

<EditForm Model="createTaskModel" OnValidSubmit="HandleValidSubmit">



    <div class="form-group">
        <label for="title">Tytuł</label>
        <InputText id="title" @bind-Value="createTaskModel.Title" class="form-control" />
        <ValidationMessage For="@(() => createTaskModel.Title)" />
    </div>

    <div class="form-group">
        <label for="dueDate">Termin</label>
        <InputDate id="dueDate" @bind-Value="createTaskModel.DueDate" class="form-control" />
        <ValidationMessage For="@(() => createTaskModel.DueDate)" />
    </div>
    <div class="mt-3">
        <button type="submit" class="btn btn-primary">Dodaj Zadanie</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Anuluj</button>
    </div>


</EditForm>

@if (isLoading)
{
    <p>Dodawanie zadania...</p>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (successMessage)
{
    <div class="alert alert-success mt-3" role="alert">
        Zadanie zostało dodane pomyślnie!
    </div>
}


@code {
    private CreateTaskCommand createTaskModel = new CreateTaskCommand
    {
        DueDate = DateTime.Today
    };

    private bool isLoading = false;
    private bool successMessage = false;
    private string errorMessage = string.Empty;

    private async Task HandleValidSubmit()
    {
        isLoading = true;
        errorMessage = string.Empty;
        successMessage = false;

        try
        {
            await TaskService.CreateTask(createTaskModel);
            successMessage = true;

            // Opcjonalnie: Przejdź do strony szczegółów nowo utworzonego zadania
            // NavigationManager.NavigateTo($"/tasks/details/{taskId}");

            // Resetowanie formularza
            createTaskModel = new CreateTaskCommand
                {
                    DueDate = DateTime.Today
                };
        }
        catch (Exception ex)
        {
            errorMessage = $"Wystąpił błąd podczas dodawania zadania: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    private void Cancel()
    {
        NavigationManager.NavigateTo("/tasksAll");
    }
}
